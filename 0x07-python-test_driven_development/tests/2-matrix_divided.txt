Importing the function from the module:
	>>> matrix_divided = __import__("2-matrix_divided").matrix_divided

Check: module docstring:
	>>> m = __import__("2-matrix_divided").__doc__
	>>> len(m) > 1
	True

Check: function docstring:
	>>> f = __import__("2-matrix_divided").matrix_divided.__doc__
	>>> len(f) > 1
	True

Check: regular division:
	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> matrix_divided(matrix, 3)
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
	>>> matrix
	[[1, 2, 3], [4, 5, 6]]

Check: passing None as matrix:
	>>> matrix_divided(None, 1)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Check: passing None as div:
	>>> matrix_divided([[1, 2, 3], [1, 2, 3]], None)
	Traceback (most recent call last):
	...
	TypeError: div must be a number

Check: matrix as string:
	>>> matrix_divided("Hello world!", 1)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats


Check: uneven matrix:
	>>> matrix_divided([[1, 2, 3], [4, 5, 6, 7]], 3)
	Traceback (most recent call last):
		...
	TypeError: Each row of the matrix must have the same size

Check: division by zero:
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
	Traceback (most recent call last):
	...
	ZeroDivisionError: division by zero

	Check: div as float:
	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> matrix_divided(matrix, 4.5)
	[[0.22, 0.44, 0.67], [0.89, 1.11, 1.33]]
	>>> matrix
	[[1, 2, 3], [4, 5, 6]]
